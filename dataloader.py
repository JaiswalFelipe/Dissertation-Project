{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "dataloader.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1QqsKPpuXmqEsQH0hfksHYGn4OwKoDdE4",
      "authorship_tag": "ABX9TyOOr3SLuHZP2PhQfmS62HVQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JaiswalFelipe/Dissertation-Project/blob/main/dataloader.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZMspP7nv8EYn"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import sys\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import imageio\n",
        "from skimage import transform\n",
        "from skimage import img_as_float\n",
        "\n",
        "import torch\n",
        "from torch.utils import data\n",
        "\n",
        "from data_utils import create_or_load_statistics, create_distrib, normalize_images, data_augmentation, compute_image_mean\n",
        "\n",
        "\n",
        "# training_dataset class\n",
        "class NGTrain(data.Dataset):\n",
        "  def __init__(self, img_dir, mask_dir, output_path):\n",
        "\n",
        "    #self.dataset_input_path = dataset_input_path\n",
        "    #self.images = images\n",
        "    self.img_dir = img_dir\n",
        "    self.mask_dir = mask_dir\n",
        "    self.images = os.listdir(img_dir)\n",
        "    self.masks = os.listdir(mask_dir)\n",
        "\n",
        "    self.output_path = output_path\n",
        "\n",
        "\n",
        "    # data and label\n",
        "    self.data, self.labels = self.load_images()\n",
        "\n",
        "    #print(self.data.ndim, self.data.shape, self.data[0].shape, np.min(self.data), np.max(self.data),\n",
        "    #      self.labels.shape, np.bincount(self.labels.astype(int).flatten()))\n",
        "\n",
        "    if self.data.ndim == 4:  # if all images have the same shape\n",
        "       self.num_channels = self.data.shape[-1]  # get the number of channels\n",
        "    else:\n",
        "       self.num_channels = self.data[0].shape[-1]  # get the number of channels\n",
        "\n",
        "    self.num_classes = 2  # binary - two classes\n",
        "    # negative classes will be converted into 2 so they can be ignored in the loss\n",
        "    self.labels[np.where(self.labels < 0)] = 2\n",
        "    \n",
        "    print('num_channels and labels', self.num_channels, self.num_classes, np.bincount(self.labels.flatten()))\n",
        "\n",
        "    #self.distrib, self.gen_classes = self.make_dataset()\n",
        "\n",
        "    self.mean, self.std = compute_image_mean(self.data)\n",
        "\n",
        "\n",
        "  def load_images(self):\n",
        "        images = []\n",
        "        masks = []\n",
        "        for img in self.images:\n",
        "            temp_image = imageio.imread(os.path.join(self.img_dir, img + '')).astype(np.float64)\n",
        "            temp_image[np.where(temp_image < -1.0e+38)] = 0 # remove extreme negative values (probably NO_DATA values)\n",
        "            \n",
        "            images.append(temp_image)\n",
        "\n",
        "        for msk in self.masks:\n",
        "            temp_mask = imageio.imread(os.path.join(self.mask_dir, msk + '')).astype(int)\n",
        "            temp_mask[np.where(temp_mask < -1.0e+38)] = 0\n",
        "\n",
        "            masks.append(temp_mask)\n",
        "\n",
        "        return np.asarray(images), np.asarray(masks)\n",
        "\n",
        "\n",
        "  def __getitem__(self, index):\n",
        "    \n",
        "    #Reading items from list.\n",
        "    img = self.data[index]\n",
        "    label = self.labels[index]\n",
        "\n",
        "    # Normalization.\n",
        "    normalize_images(img, self.mean, self.std) # check data_utils.py\n",
        "    \n",
        "    # Data augmentation\n",
        "    img, label = data_augmentation(img, label)\n",
        "     \n",
        "    img = np.transpose(img, (2, 0, 1))\n",
        "\n",
        "    # Turning to tensors.\n",
        "    img = torch.from_numpy(img.copy())\n",
        "    label = torch.from_numpy(label.copy())\n",
        "\n",
        "    # Returning to iterator.\n",
        "    return img.float(), label\n",
        "\n",
        "  def __len__(self):\n",
        "    return len(self.data)\n",
        "\n",
        "\n",
        "\n",
        "# testing_dataset class\n",
        "class NGTest(data.Dataset):\n",
        "    def __init__(self, dataset_input_path, images, crop_size, stride_crop, output_path):\n",
        "        #super().__init__()\n",
        "        #assert mode in ['Train', 'Test']\n",
        "\n",
        "        #self.mode = mode\n",
        "        self.dataset_input_path = dataset_input_path\n",
        "        self.images = images\n",
        "        self.crop_size = crop_size\n",
        "        self.stride_crop = stride_crop\n",
        "\n",
        "        self.output_path = output_path\n",
        "\n",
        "        # data and label\n",
        "        self.data, self.labels = self.load_images()\n",
        "        #self.data[np.where(self.data < -1.0e+38)] = 0  # remove extreme negative values (probably NO_DATA values)\n",
        "        print(self.data.ndim, self.data.shape, self.data[0].shape, np.min(self.data), np.max(self.data),\n",
        "              self.labels.shape, np.bincount(self.labels.astype(int).flatten()))\n",
        "\n",
        "        if self.data.ndim == 4:  # if all images have the same shape\n",
        "            self.num_channels = self.data.shape[-1]  # get the number of channels\n",
        "        else:\n",
        "            self.num_channels = self.data[0].shape[-1]  # get the number of channels\n",
        "\n",
        "        self.num_classes = 2  # binary - two classes\n",
        "        # negative classes will be converted into 2 so they can be ignored in the loss\n",
        "        self.labels[np.where(self.labels < 0)] = 2\n",
        "\n",
        "        print('num_channels and labels', self.num_channels, self.num_classes, np.bincount(self.labels.flatten()))\n",
        "\n",
        "        self.distrib, self.gen_classes = self.make_dataset()\n",
        "\n",
        "        self.mean, self.std = create_or_load_statistics(self.data, self.distrib, self.crop_size,\n",
        "                                                        self.stride_crop, self.output_path)\n",
        "\n",
        "        if len(self.distrib) == 0:\n",
        "            raise RuntimeError('Found 0 images, please check the data set')\n",
        "\n",
        "    def load_images(self):\n",
        "        images = []\n",
        "        masks = []\n",
        "        for img in self.images:\n",
        "            temp_image = img_as_float(imageio.imread(os.path.join(self.dataset_input_path, img + '_stack.tif')))\n",
        "            temp_image[np.where(temp_image < -1.0e+38)] = 0  # remove extreme negative values (probably NO_DATA values)  \n",
        "\n",
        "            temp_mask = imageio.imread(os.path.join(self.dataset_input_path, img + '_mask.tif')).astype(int)\n",
        "            temp_mask[np.where(temp_mask < -1.0e+38)] = 0\n",
        "            \n",
        "            images.append(temp_image)\n",
        "            masks.append(temp_mask)\n",
        "\n",
        "        return np.asarray(images), np.asarray(masks)\n",
        "\n",
        "    def make_dataset(self):\n",
        "        return create_distrib(self.labels, self.crop_size, self.stride_crop, self.num_classes, return_all=True)\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        # Reading items from list.\n",
        "        cur_map, cur_x, cur_y = self.distrib[index][0], self.distrib[index][1], self.distrib[index][2]\n",
        "\n",
        "        img = np.copy(self.data[cur_map][cur_x:cur_x + self.crop_size, cur_y:cur_y + self.crop_size, :])\n",
        "        label = np.copy(self.labels[cur_map][cur_x:cur_x + self.crop_size, cur_y:cur_y + self.crop_size])\n",
        "\n",
        "        # Normalization.\n",
        "        normalize_images(img, self.mean, self.std)\n",
        "\n",
        "        #if self.mode == 'Train':\n",
        "        #    img, label = data_augmentation(img, label)\n",
        "\n",
        "        img = np.transpose(img, (2, 0, 1))\n",
        "\n",
        "        # Turning to tensors.\n",
        "        img = torch.from_numpy(img.copy())\n",
        "        label = torch.from_numpy(label.copy())\n",
        "\n",
        "        # Returning to iterator.\n",
        "        return img.float(), label, cur_map, cur_x, cur_y\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.distrib)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# validation_dataset class\n",
        "# needs a separate class because in validation, we load patches instead of whole images\n",
        "# along with their coordinates for reconstruction\n",
        "class NGValid(data.Dataset):\n",
        "  def __init__(self, csv_file, img_dir, mask_dir, output_path):\n",
        "\n",
        "    #self.dataset_input_path = dataset_input_path\n",
        "    #self.images = images\n",
        "    self.coords = pd.read_csv(csv_file)\n",
        "    self.img_dir = img_dir\n",
        "    self.mask_dir = mask_dir\n",
        "    self.images = os.listdir(img_dir)\n",
        "    self.masks = os.listdir(mask_dir)\n",
        "\n",
        "    self.output_path = output_path\n",
        "\n",
        "\n",
        "    # data and label\n",
        "    self.data, self.labels = self.load_images()\n",
        "    #self.data[np.where(self.data < -1.0e+38)] = 0  # remove extreme negative values (probably NO_DATA values)\n",
        "    #print(self.data.ndim, self.data.shape, self.data[0].shape, np.min(self.data), np.max(self.data),\n",
        "    #          self.labels.shape, np.bincount(self.labels.astype(int).flatten()))\n",
        "\n",
        "    if self.data.ndim == 4:  # if all images have the same shape\n",
        "            self.num_channels = self.data.shape[-1]  # get the number of channels\n",
        "    else:\n",
        "            self.num_channels = self.data[0].shape[-1]  # get the number of channels\n",
        "\n",
        "    self.num_classes = 2  # binary - two classes\n",
        "    # negative classes will be converted into 2 so they can be ignored in the loss\n",
        "    self.labels[np.where(self.labels < 0)] = 2\n",
        "\n",
        "    print('num_channels and labels', self.num_channels, self.num_classes, np.bincount(self.labels.flatten()))\n",
        "\n",
        "    #self.distrib, self.gen_classes = self.make_dataset()\n",
        "\n",
        "    self.mean, self.std = compute_image_mean(self.data)\n",
        "\n",
        "        \n",
        "    def load_images(self):\n",
        "        images = []\n",
        "        masks = []\n",
        "        for img in self.images:\n",
        "            temp_image = imageio.imread(os.path.join(self.img_dir, img + '')).astype(np.float64)\n",
        "            temp_image[np.where(temp_image < -1.0e+38)] = 0 # remove extreme negative values (probably NO_DATA values)\n",
        "            \n",
        "            images.append(temp_image)\n",
        "\n",
        "        for msk in self.masks:\n",
        "            temp_mask = imageio.imread(os.path.join(self.mask_dir, msk + '')).astype(int)\n",
        "            temp_mask[np.where(temp_mask < -1.0e+38)] = 0\n",
        "\n",
        "            masks.append(temp_mask)\n",
        "\n",
        "        return np.asarray(images), np.asarray(masks)\n",
        "\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        # Reading items from list.\n",
        "        cur_map, cur_x, cur_y = self.coords.iloc[index, 0], self.coords.iloc[index, 1], self.coords.iloc[index, 2]\n",
        "\n",
        "        img = np.copy(self.data[cur_map][cur_x, cur_y, :])\n",
        "        label = np.copy(self.labels[cur_map][cur_x, cur_y])\n",
        "\n",
        "        # Normalization.\n",
        "        normalize_images(img, self.mean, self.std)\n",
        "\n",
        "        img, label = data_augmentation(img, label)\n",
        "\n",
        "        img = np.transpose(img, (2, 0, 1))\n",
        "\n",
        "        # Turning to tensors.\n",
        "        img = torch.from_numpy(img.copy())\n",
        "        label = torch.from_numpy(label.copy())\n",
        "\n",
        "        # Returning to iterator.\n",
        "        return img.float(), label, cur_map, cur_x, cur_y\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)"
      ]
    }
  ]
}